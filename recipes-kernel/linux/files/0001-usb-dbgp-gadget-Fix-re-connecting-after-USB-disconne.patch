From f416546045bc0368cedf2b6c83b9f949ac8a12ee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ky=C3=B6sti=20M=C3=A4lkki?= <kyosti.malkki@gmail.com>
Date: Mon, 26 Aug 2013 18:23:18 +0300
Subject: [PATCH 1/2] usb dbgp gadget: Fix re-connecting after USB disconnect
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

SET_FEATURE request for DEBUG_MODE only worked the first time after module
initialisation. On USB host reset or cable disconnect gserial_disconnect()
clears the associations dbgp.serial->in->desc and dbgp_serial->out->desc.

Per the USB 2.0 debug device specification, SET_FEATURE with DEBUG_MODE
is to be treated as if it were a SET_CONFIGURATION request. Redo endpoint
configuration on this request.

Code has assumption that endpoint mapping remains unchanged from what was
previously returned as GET_DESCRIPTOR DT_DEBUG response.

Signed-off-by: Kyösti Mälkki <kyosti.malkki@gmail.com>
---
 drivers/usb/gadget/dbgp.c | 39 ++++++++++++++++++++++++++-------------
 1 file changed, 26 insertions(+), 13 deletions(-)

diff --git a/drivers/usb/gadget/dbgp.c b/drivers/usb/gadget/dbgp.c
index 986fc51..c9dcba3 100644
--- a/drivers/usb/gadget/dbgp.c
+++ b/drivers/usb/gadget/dbgp.c
@@ -214,6 +214,7 @@ static void dbgp_disconnect(struct usb_gadget *gadget)
 #ifdef CONFIG_USB_G_DBGP_PRINTK
 	dbgp_disable_ep();
 #else
+	dev_dbg(&dbgp.gadget->dev, "disconnected\n");
 	gserial_disconnect(dbgp.serial);
 #endif
 }
@@ -235,7 +236,7 @@ static void dbgp_unbind(struct usb_gadget *gadget)
 static unsigned char tty_line;
 #endif
 
-static int __init dbgp_configure_endpoints(struct usb_gadget *gadget)
+static int dbgp_configure_endpoints(struct usb_gadget *gadget)
 {
 	int stp;
 
@@ -271,19 +272,10 @@ static int __init dbgp_configure_endpoints(struct usb_gadget *gadget)
 
 	dbgp.serial->in->desc = &i_desc;
 	dbgp.serial->out->desc = &o_desc;
-
-	if (gserial_alloc_line(&tty_line)) {
-		stp = 3;
-		goto fail_3;
-	}
+#endif
 
 	return 0;
 
-fail_3:
-	dbgp.o_ep->driver_data = NULL;
-#else
-	return 0;
-#endif
 fail_2:
 	dbgp.i_ep->driver_data = NULL;
 fail_1:
@@ -322,10 +314,17 @@ static int __init dbgp_bind(struct usb_gadget *gadget,
 		err = -ENOMEM;
 		goto fail;
 	}
+
+	if (gserial_alloc_line(&tty_line)) {
+		stp = 4;
+		err = -ENODEV;
+		goto fail;
+	}
 #endif
+
 	err = dbgp_configure_endpoints(gadget);
 	if (err < 0) {
-		stp = 4;
+		stp = 5;
 		goto fail;
 	}
 
@@ -377,12 +376,26 @@ static int dbgp_setup(struct usb_gadget *gadget,
 		err = 0;
 	} else if (request == USB_REQ_SET_FEATURE &&
 		   value == USB_DEVICE_DEBUG_MODE) {
-		dev_dbg(&dbgp.gadget->dev, "setup: feat debug\n");
 #ifdef CONFIG_USB_G_DBGP_PRINTK
 		err = dbgp_enable_ep();
 #else
+		if (!(dbgp.serial->in && dbgp.serial->in->desc &&
+			dbgp.serial->out && dbgp.serial->out->desc)) {
+			dev_dbg(&dbgp.gadget->dev, "needs reconfiguration\n");
+			err = dbgp_configure_endpoints(gadget);
+			if (err < 0) {
+				goto fail;
+			}
+		}
+		if (dbgp.serial->in && dbgp.serial->in->desc &&
+			dbgp.serial->out && dbgp.serial->out->desc) {
+			dev_dbg(&dbgp.gadget->dev, "epIn %02x, epOut %02x\n",
+				dbgp.serial->in->desc->bEndpointAddress,
+				dbgp.serial->out->desc->bEndpointAddress);
+		}
 		err = gserial_connect(dbgp.serial, tty_line);
 #endif
+		dev_dbg(&dbgp.gadget->dev, "setup: feat debug (%d)\n", err);
 		if (err < 0)
 			goto fail;
 	} else
-- 
1.8.1.1

